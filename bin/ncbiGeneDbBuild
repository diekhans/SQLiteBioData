#!/usr/bin/env python3

import sys
from os import path as osp
import time
import argparse
from functools import partial
from pycbio.tsv import TsvReader
from pycbio.db import sqliteOps

##
# Design notes
#   - SQL is embedded here rather than in separate files to make it easy
#     to only build a subset of tables.
##

verbose = False

class Tables:
    gene_info = "gene_info"
    gene2refseq = "gene2refseq"
    gene_group = "gene_group"
    gene_orthologs = "gene_orthologs"
    gene2go = "gene2go"
    gene2ensembl = "gene2ensembl"
ALL_TABLES = (Tables.gene_info, Tables.gene2refseq, Tables.gene_group,
              Tables.gene_orthologs, Tables.gene2go, Tables.gene2ensembl)


def parseArgs():
    desc = """create a sqlite data from NCBI genes download files.

    Requires NCBI gene database download from https://ftp.ncbi.nih.gov/gene/DATA/
    The current files are imported:

       gene2refseq.gz
       gene_info.gz
       gene_group.gz
       gene_orthologs.gz
       gene2go.gz
       gene2ensembl.gz

    To download the entire gene database:
       wget -np -nv -nd -r -l 0 -A 'gene*.gz' --unlink -e robots=off https://ftp.ncbi.nih.gov/gene/DATA/

    The size as of 2022-07 is 11G.  These do not need to be uncompressed to load.

    All column names are user from NCBI files, with '.' being replaced by '_'.
    A column RNA_nucleotide_accession is added to gene2refseq with the accession
    without the version.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--verbose", action="store_true",
                        help="print info about each table load")
    parser.add_argument("--table", "-t", dest="tables", action="append", choices=ALL_TABLES,
                        help="only load these tables, maybe repeated")
    parser.add_argument("ncbiGeneDownloadDir",
                        help="directory with downloaded files")
    parser.add_argument("ncbiGeneDb",
                        help="create this database")
    opts = parser.parse_args()
    global verbose
    verbose = opts.verbose
    if opts.tables is None:
        opts.tables = ALL_TABLES
    opts.tables = frozenset(opts.tables)
    return opts

def baseAccOrNone(accv):
    "drop version if not None"
    return accv.split('.')[0] if accv is not None else None

def getDataFile(datadir, basename):
    "compressed or uncompressed path"
    fpath = osp.join(datadir, basename)
    fpathCmp = fpath + ".gz"
    if osp.exists(fpath):
        return fpath
    elif osp.exists(fpathCmp):
        return fpathCmp
    else:
        raise FileNotFoundError(fpath + " or " + fpathCmp)

def tsvToSqlColumnNames(tsvCols):
    "replace accession.version with accession_version in various column names"
    return [c.replace('.', '_') for c in tsvCols]

def fixRowNulls(tsvReader, row, nonNullTsvCols):
    "update columns to None, if they are are '-' or 'NA' and not listed in nonNullTsvCols"
    for idx, colName in enumerate(tsvReader.columns):
        if (colName not in nonNullTsvCols) and (row[idx] in ('-', 'NA')):
            row[idx] = None

class BatchInserter:
    "insert rows in batches"
    BATCH_SIZE = 1000000

    def __init__(self, table, dbColNames):
        self.table = table
        self.insertSql = "INSERT INTO {table} ({colnames}) VALUES ({valbinds});".format(table=table,
                                                                                        colnames=",".join(dbColNames),
                                                                                        valbinds=",".join(len(dbColNames) * '?'))
        self.rows = []
        self.cnt = 0
        self.startTime = time.time()

    def _insert(self, cur):
        cur.execute("BEGIN TRANSACTION")
        cur.executemany(self.insertSql, self.rows)
        cur.execute("COMMIT TRANSACTION")
        self.rows = []

    def add(self, cur, row):
        self.rows.append(row)
        self.cnt += 1
        if len(self.rows) >= self.BATCH_SIZE:
            self._insert(cur)

    def finish(self, cur):
        if len(self.rows) > 0:
            self._insert(cur)
        if verbose:
            elapsedTime = time.time() - self.startTime
            print(f"{self.table} inserted {self.cnt} rows in {elapsedTime:.2f} seconds", file=sys.stderr, flush=True)


def tsvLoadToTable(cur, tsvReader, table, dbColNames, *, nonNullTsvCols=frozenset(),
                   rowEditFunc=None):
    """The nonNullcols arguments indicate which do not have NULL substitution performed.
    The  rowEditFunc is called on each row, to add extra Columns values or do other edits.
    """

    batchInserter = BatchInserter(table, dbColNames)
    for rec in tsvReader:
        row = rec.getRow()  # FIXME this could should really use names everywhere
        fixRowNulls(tsvReader, row, nonNullTsvCols)
        if rowEditFunc is not None:
            rowEditFunc(row)
        batchInserter.add(cur, row)
    batchInserter.finish(cur)

def checkExpectColumns(tsvFile, columns, expectedTsvCols):
    "validate this code matches header, including order."
    columns = tuple(columns)
    if columns != expectedTsvCols:
        raise Exception(f"refseq TSV file '{tsvFile}' columns don't match what is expected in this code, please update the code:\n"
                        f"got: {columns}\nexpect: {expectedTsvCols}")

def buildTable(conn, ncbiGeneDownloadDir, expectedTsvCols, table, createSql, indexSql,
               dbColNames, *, nonNullTsvCols=frozenset(), rowEditFunc=None):
    tsvFile = getDataFile(ncbiGeneDownloadDir, table)
    tsvReader = TsvReader(tsvFile)
    checkExpectColumns(tsvFile, tsvReader.columns, expectedTsvCols)
    cur = conn.cursor()
    cur.execute(createSql)
    tsvLoadToTable(cur, tsvReader, table, dbColNames, nonNullTsvCols=nonNullTsvCols, rowEditFunc=rowEditFunc)
    cur.execute(indexSql)
    cur.close()


################################################################
# gene_info
################################################################
geneInfoExpectedTsvCols = (
    "tax_id", "GeneID", "Symbol", "LocusTag", "Synonyms", "dbXrefs",
    "chromosome", "map_location", "description", "type_of_gene",
    "Symbol_from_nomenclature_authority",
    "Full_name_from_nomenclature_authority", "Nomenclature_status",
    "Other_designations", "Modification_date", "Feature_type"
)

geneInfoCreateSql = """
DROP TABLE IF EXISTS gene_info;
CREATE TABLE gene_info (
    tax_id INT NOT NULL,
    GeneID INT NOT NULL,
    Symbol TEXT,
    LocusTag TEXT,
    Synonyms TEXT,
    dbXrefs TEXT,
    chromosome TEXT,
    map_location TEXT,
    description TEXT,
    type_of_gene TEXT NOT NULL,
    Symbol_from_nomenclature_authority TEXT,
    Full_name_from_nomenclature_authority TEXT,
    Nomenclature_status TEXT,
    Other_designations TEXT,
    Modification_date TEXT NOT NULL,
    Feature_type TEXT
);
"""
# note: can't define GeneID as PRIMARY KEY or it becomes the rowid

geneInfoIndexSql = """
CREATE INDEX gene_info_tax_id ON gene_info (tax_id);
CREATE UNIQUE INDEX gene_info_GeneId ON gene_info (GeneId);
CREATE INDEX gene_info_Symbol ON gene_info (Symbol);
CREATE INDEX gene_info_type_of_gene ON gene_info (type_of_gene);
"""

geneInfoNonNullCols = frozenset(("tax_id", "GeneID", "type_of_gene", "Modification_date"))

def loadGeneInfo(conn, ncbiGeneDownloadDir):
    dbColNames = tsvToSqlColumnNames(geneInfoExpectedTsvCols)
    buildTable(conn, ncbiGeneDownloadDir, geneInfoExpectedTsvCols, "gene_info", geneInfoCreateSql,
               geneInfoIndexSql, dbColNames, nonNullTsvCols=geneInfoNonNullCols)

################################################################
# gene2refseq
################################################################
gene2refseqExpectedTsvCols = (
    "tax_id", "GeneID", "status", "RNA_nucleotide_accession.version",
    "RNA_nucleotide_gi", "protein_accession.version", "protein_gi",
    "genomic_nucleotide_accession.version", "genomic_nucleotide_gi",
    "start_position_on_the_genomic_accession",
    "end_position_on_the_genomic_accession", "orientation", "assembly",
    "mature_peptide_accession.version", "mature_peptide_gi", "Symbol"
)

# these are derived by dropping version from accessions
gene2refseqDerivedCols = (
    "RNA_nucleotide_accession",
    "protein_accession",
    "genomic_nucleotide_accession",
    "mature_peptide_accession",
)

gene2refseqCreateSql = """
DROP TABLE IF EXISTS gene2refseq;
CREATE TABLE gene2refseq (
    tax_id INT NOT NULL,
    GeneID INT NOT NULL,
    status TEXT,
    RNA_nucleotide_accession_version TEXT,
    RNA_nucleotide_gi TEXT,
    protein_accession_version TEXT,
    protein_gi TEXT,
    genomic_nucleotide_accession_version TEXT,
    genomic_nucleotide_gi TEXT,
    start_position_on_the_genomic_accession TEXT,
    end_position_on_the_genomic_accession TEXT,
    orientation TEXT,
    assembly TEXT,
    mature_peptide_accession_version TEXT,
    mature_peptide_gi TEXT,
    Symbol TEXT NOT NULL,
    -- Derived columns
    RNA_nucleotide_accession TEXT,
    protein_accession TEXT,
    genomic_nucleotide_accession TEXT,
    mature_peptide_accession TEXT,
    FOREIGN KEY(GeneID) REFERENCES gene_info(GeneID)
);
"""

gene2refseqIndexSql = """
CREATE INDEX gene2refseq_tax_id ON gene2refseq (tax_id);
CREATE INDEX gene2refseq_GeneId ON gene2refseq (GeneId);
CREATE INDEX gene2refseq_RNA_nucleotide_accession_version ON gene2refseq (RNA_nucleotide_accession_version);
CREATE INDEX gene2refseq_protein_accession_version ON gene2refseq (protein_accession_version);
CREATE INDEX gene2refseq_genomic_nucleotide_accession_version ON gene2refseq (genomic_nucleotide_accession_version);
CREATE INDEX gene2refseq_mature_peptide_accession_version ON gene2refseq (mature_peptide_accession_version);
CREATE INDEX gene2refseq_Symbol ON gene2refseq (Symbol);
CREATE INDEX gene2refseq_RNA_nucleotide_accession ON gene2refseq (RNA_nucleotide_accession);
CREATE INDEX gene2refseq_protein_accession ON gene2refseq (protein_accession);
CREATE INDEX gene2refseq_genomic_nucleotide_accession ON gene2refseq (genomic_nucleotide_accession);
CREATE INDEX gene2refseq_mature_peptide_accession ON gene2refseq (mature_peptide_accession);
"""

# orientation is '?' if unknown, '-' is strand, not NULL
gene2refseqNonNullCols = frozenset(("tax_id", "GeneID", "Symbol", "orientation"))

def loadGene2refseq(conn, ncbiGeneDownloadDir):
    def _addDerived(row):
        row.extend([baseAccOrNone(row[3]),    # RNA_nucleotide_accession.version
                    baseAccOrNone(row[5]),    # protein_accession.version
                    baseAccOrNone(row[7]),    # genomic_nucleotide_accession.version
                    baseAccOrNone(row[13])])  # mature_peptide_accession.version

    dbColNames = tsvToSqlColumnNames(gene2refseqExpectedTsvCols) + list(gene2refseqDerivedCols)
    buildTable(conn, ncbiGeneDownloadDir, gene2refseqExpectedTsvCols,
               "gene2refseq", gene2refseqCreateSql, gene2refseqIndexSql,
               dbColNames, nonNullTsvCols=gene2refseqNonNullCols,
               rowEditFunc=_addDerived)

################################################################
# gene_group and gene_orthologs
################################################################

geneAssocExpectedTsvCols = (
    "tax_id", "GeneID", "relationship", "Other_tax_id", "Other_GeneID"
)
geneAssocCreateSql = """
DROP TABLE IF EXISTS {table};
CREATE TABLE {table} (
    tax_id INT NOT NULL,
    GeneID INT NOT NULL,
    relationship TEXT NOT NULL,
    Other_tax_id INT NOT NULL,
    Other_GeneID INT NOT NULL,
    FOREIGN KEY(GeneID) REFERENCES gene_info(GeneID),
    FOREIGN KEY(Other_GeneID) REFERENCES gene_info(GeneID)
);
"""

geneAssocIndexSql = """
CREATE INDEX {table}_tax_id ON {table} (tax_id);
CREATE INDEX {table}_GeneId ON {table} (GeneId);
CREATE INDEX {table}_Other_tax_id ON {table} (Other_tax_id);
CREATE INDEX {table}_Other_GeneId ON {table} (Other_GeneId);
"""
geneAssocNonNullCols = geneAssocExpectedTsvCols

def loadGeneAssocTypeTable(conn, ncbiGeneDownloadDir, table):
    dbColNames = tsvToSqlColumnNames(geneAssocExpectedTsvCols)
    buildTable(conn, ncbiGeneDownloadDir, geneAssocExpectedTsvCols, table,
               geneAssocCreateSql.format(table=table), geneAssocIndexSql.format(table=table),
               dbColNames, nonNullTsvCols=geneAssocNonNullCols)

################################################################
# gene2go
################################################################
gene2goExpectedTsvCols = (
    "tax_id", "GeneID", "GO_ID", "Evidence", "Qualifier", "GO_term", "PubMed", "Category"
)

gene2goCreateSql = """
DROP TABLE IF EXISTS gene2go;
CREATE TABLE gene2go (
    tax_id INT NOT NULL,
    GeneID INT NOT NULL,
    GO_ID TEXT NOT NULL,
    Evidence TEXT NULL,
    Qualifier TEXT NULL,
    GO_term TEXT NOT NULL,
    PubMed_refs_id INT,
    Category TEXT NULL,
    FOREIGN KEY(GeneID) REFERENCES gene_info(GeneID)
    FOREIGN KEY(PubMed_refs_id) REFERENCES pubmed_ref (id)
);
"""
gene2goIndexSql = """
CREATE INDEX gene2go_tax_id ON gene2go (tax_id);
CREATE INDEX gene2go_GeneId ON gene2go (GeneId);
CREATE INDEX gene2go_GO_ID ON gene2go (GO_ID);
CREATE INDEX gene2go_GO_term ON gene2go (GO_term);
"""

pubmed_refCreateSql = """
DROP TABLE IF EXISTS pubmed_ref;
CREATE TABLE pubmed_ref (
    id INT NOT NULL,
    PubMed INT NOT NULL
);
"""

pubmed_refIndexSql = """
CREATE INDEX pubmed_ref_id ON pubmed_ref (id);
CREATE INDEX pubmed_ref_PubMed ON pubmed_ref (PubMed);
"""
def _addPubmedRefs(pubmed_refs, pubmeds):
    pubmed_refs.append(pubmeds.split('|'))
    return len(pubmed_refs)  # 1-based id

def _editGene2goPubMed(pubmed_refs, row):
    "update PubMed column"
    pubmeds = row[6]
    if (pubmeds is None) or (pubmeds == ""):
        pubmeds_ref_id = None
    else:
        pubmeds_ref_id = _addPubmedRefs(pubmed_refs, pubmeds)
    row[6] = pubmeds_ref_id

def loadPubMedRef(conn, pubmed_refs):
    "load one to many pubmed_ref table"
    table = "pubmed_ref"
    cur = conn.cursor()
    cur.execute(pubmed_refCreateSql)
    batchInserter = BatchInserter(table, ("id", "PubMed"))
    for idx, pubmeds in enumerate(pubmed_refs):
        for pubmed in pubmeds:
            batchInserter.add(cur, (idx + 1, pubmed))
    batchInserter.finish(cur)
    cur.execute(pubmed_refIndexSql)
    cur.close()

def loadGene2go(conn, ncbiGeneDownloadDir):
    # replace PubMed with PubMed_ref
    dbColNames = tsvToSqlColumnNames(gene2goExpectedTsvCols)
    dbColNames[dbColNames.index("PubMed")] = "PubMed_refs_id"

    # collects one_to_many pubmeds to add to pubmed_ref; id is index +1
    pubmed_refs = []
    buildTable(conn, ncbiGeneDownloadDir, gene2goExpectedTsvCols, "gene2go", gene2goCreateSql,
               gene2goIndexSql, dbColNames, rowEditFunc=partial(_editGene2goPubMed, pubmed_refs))

    loadPubMedRef(conn, pubmed_refs)

################################################################
# gene2ensembl
################################################################
gene2ensemblExpectedTsvCols = (
    "tax_id", "GeneID", "Ensembl_gene_identifier",
    "RNA_nucleotide_accession.version", "Ensembl_rna_identifier",
    "protein_accession.version", "Ensembl_protein_identifier"
)

# these are derived by dropping version from accessions
gene2ensemblDerivedCols = (
    "Ensembl_gene_id", "RNA_nucleotide_accession", "Ensembl_rna_id",
    "protein_accession", "Ensembl_protein_id"
)

gene2ensemblCreateSql = """
DROP TABLE IF EXISTS gene2ensembl;
CREATE TABLE gene2ensembl (
    tax_id INT NOT NULL,
    GeneID INT NOT NULL,
    Ensembl_gene_identifier TEXT,
    RNA_nucleotide_accession_version TEXT,
    Ensembl_rna_identifier TEXT,
    protein_accession_version TEXT,
    Ensembl_protein_identifier TEXT,
    -- derived columns
    Ensembl_gene_id TEXT,
    RNA_nucleotide_accession TEXT,
    Ensembl_rna_id TEXT,
    protein_accession TEXT,
    Ensembl_protein_id TEXT,
    FOREIGN KEY(GeneID) REFERENCES gene_info(GeneID)
);
"""

gene2ensemblIndexSql = """
CREATE INDEX gene2ensembl_tax_id ON gene2ensembl (tax_id);
CREATE INDEX gene2ensembl_GeneId ON gene2ensembl (GeneId);
CREATE INDEX gene2ensembl_RNA_nucleotide_accession_version ON gene2ensembl (RNA_nucleotide_accession_version);
CREATE INDEX gene2ensembl_protein_accession_version ON gene2ensembl (protein_accession_version);
"""

def loadGene2ensembl(conn, ncbiGeneDownloadDir):
    def _addDerived(row):
        row.extend([baseAccOrNone(row[2]),    # Ensembl_gene_identifier
                    baseAccOrNone(row[3]),    # RNA_nucleotide_accession.version
                    baseAccOrNone(row[4]),    # Ensembl_rna_identifier
                    baseAccOrNone(row[5]),    # protein_accession.version
                    baseAccOrNone(row[6])])   # Ensembl_protein_identifier

    dbColNames = tsvToSqlColumnNames(gene2ensemblExpectedTsvCols) + list(gene2ensemblDerivedCols)
    buildTable(conn, ncbiGeneDownloadDir, gene2ensemblExpectedTsvCols,
               "gene2ensembl", gene2ensemblCreateSql, gene2ensemblIndexSql,
               dbColNames, rowEditFunc=_addDerived)

###
# main
###
def ncbiGeneDbBuild(ncbiGeneDownloadDir, ncbiGeneDb, tables):
    conn = sqliteOps.connect(ncbiGeneDb, create=True)
    sqliteOps.setFastLoadPragmas(conn)
    if Tables.gene_info in tables:
        loadGeneInfo(conn, ncbiGeneDownloadDir)
    if Tables.gene2refseq in tables:
        loadGene2refseq(conn, ncbiGeneDownloadDir)
    if Tables.gene_group in tables:
        loadGeneAssocTypeTable(conn, ncbiGeneDownloadDir, "gene_group")
    if Tables.gene_orthologs in tables:
        loadGeneAssocTypeTable(conn, ncbiGeneDownloadDir, "gene_orthologs")
    if Tables.gene2go in tables:
        loadGene2go(conn, ncbiGeneDownloadDir)
    if Tables.gene2ensembl in tables:
        loadGene2ensembl(conn, ncbiGeneDownloadDir)
    conn.close()

def main(opts):
    ncbiGeneDbBuild(opts.ncbiGeneDownloadDir, opts.ncbiGeneDb, opts.tables)

main(parseArgs())
