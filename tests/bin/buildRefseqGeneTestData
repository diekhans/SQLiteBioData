#!/usr/bin/env python3

from os import path as osp
import argparse
from pycbio.sys import fileOps
from pycbio.tsv import TsvReader
from multiprocessing import Pool

def parseArgs():
    desc = """generate test cases from download files.
    """
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("refseqCasesTsv",
                        help="contains GeneID column is used, all others ignored")
    parser.add_argument("indir",
                        help="directory with downloaded RefSeq gene files")
    parser.add_argument("outdir",
                        help="directory for output")
    return parser.parse_args()

geneIdFiles = (
    "gene2accession",
    "gene2ensembl",
    "gene2go",
    "gene2pubmed",
    "gene2refseq",
    "gene2vega",
    "gene_group",
    "gene_info",
    "gene_neighbors",
    "gene_orthologs",
)
# FIXME:  what is  "gene_orthologs_supplemental",

geneHistoryFile = "gene_history"

protAccFile = "gene_refseq_uniprotkb_collab"

def drop_version(accv):
    return accv.split('.')[0]

def int_or_none_in(v):
    return None if v == '-' else int(v)

def int_or_none_out(v):
    return '-' if v is None else str(v)

geneIdTypeMap = {
    'GeneID': (int_or_none_in, int_or_none_out),
    'Discontinued_GeneID': (int_or_none_in, int_or_none_out)
}

def loadRefseqCasesTsv(refseqCasesTsv):
    """returns a set of geneids and process accessions"""
    testGeneIds = set()
    testProtAccs = set()
    for row in TsvReader(refseqCasesTsv, typeMap=geneIdTypeMap):
        testGeneIds.add(row.GeneID)
        if row.protein_accession != "":
            testProtAccs.add(drop_version(row.protein_accession))
    if len(testGeneIds) == 0:
        raise Exception(f"no data found in '{refseqCasesTsv}'")
    return testGeneIds, testProtAccs

def filterRefSeqGeneFile(filterFunc, filterSet, indir, outdir, fname):
    "load file based on selecting by gene ids"
    reader = TsvReader(osp.join(indir, fname + ".gz"), typeMap=geneIdTypeMap)
    with open(osp.join(outdir, fname), 'w') as outfh:
        outfh.write('#' + '\t'.join(reader.columns) + '\n')
        for row in reader:
            if filterFunc(filterSet, row):
                fileOps.prRow(outfh, row)

def _geneIdFilterFunc(testGeneIds, row):
    return row.GeneID in testGeneIds

def _geneIdHistoryFilterFunc(testGeneIds, row):
    return (row.GeneID in testGeneIds) or (row.Discontinued_GeneID in testGeneIds)

def _protAccFilterFunc(testProtAccs, row):
    return drop_version(row.NCBI_protein_accession) in testProtAccs\

def processFiles(testGeneIds, testProtAccs, indir, outdir):
    with Pool() as pool:
        pool.starmap(filterRefSeqGeneFile,
                     [(_geneIdFilterFunc, testGeneIds, indir, outdir, fname) for fname in geneIdFiles]
                     + [(_geneIdHistoryFilterFunc, testGeneIds, indir, outdir, geneHistoryFile)]
                     + [(_protAccFilterFunc, testProtAccs, indir, outdir, protAccFile)])

def buildRefseqGeneTestData(opts):
    testGeneIds, testProtAccs = loadRefseqCasesTsv(opts.refseqCasesTsv)
    fileOps.ensureDir(opts.outdir)
    processFiles(testGeneIds, testProtAccs, opts.indir, opts.outdir)

buildRefseqGeneTestData(parseArgs())
